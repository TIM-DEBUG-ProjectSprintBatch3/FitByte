events {
    # The events block is required but can be left empty for basic configurations.
    # It usually contains directives that affect the connection handling.
}

http {
    # The http block includes settings for handling HTTP traffic.

    include       mime.types;
    # Specifies the file that defines MIME types for various file extensions.

    default_type  application/octet-stream;
    # Sets the default MIME type for files when the type is not determined.

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    # Defines a custom log format called 'main' for access logs.

    access_log  /var/log/nginx/access.log  main;
    # Specifies the file and format for access logs.

    error_log   /var/log/nginx/error.log warn;
    # Specifies the file and log level for error logs.

    sendfile        on;
    # Enables the use of sendfile for efficient file transfer.

    keepalive_timeout  65;
    # Sets the timeout for persistent connections with the client.

    upstream readonly_service {
        server host.docker.internal:8081; 
    }
    upstream manipulasidata_service {
        server host.docker.internal:8082; 
    }
    upstream file_service {
        server host.docker.internal:8083; 
    }

    server {
        listen 80;
        # The server block defines settings for a virtual server.
        # This server listens on port 80.

        server_name localhost;
        # The server_name directive specifies the domain name for this server.

        location /v1/login {
            proxy_pass http://manipulasidata_service/v1/login;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /v1/register {
            proxy_pass http://manipulasidata_service/v1/register;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location / {
            if ($request_method !~* GET) {
                # For Write Requests
                proxy_pass http://host.docker.internal:8082;
            }
            # For Read Requests
            proxy_pass http://host.docker.internal:8081;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /v1/file {
            proxy_pass http://file_service/v1/file;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # location / {
        #     return 404;
        #     # Return a 404 Not Found status for any requests not matching the above locations.
        # }
    }
}
